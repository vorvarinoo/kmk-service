"use strict";

function _classCallCheck( t, s ) {
  if ( !( t instanceof s ) ) throw new TypeError( "Cannot call a class as a function" );
}

function _defineProperties( t, s ) {
  for ( var e = 0; e < s.length; e++ ) {
    var o = s[ e ];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && ( o.writable = !0 ), Object.defineProperty( t, o.key, o );
  }
}

function _createClass( t, s, e ) {
  return s && _defineProperties( t.prototype, s ), e && _defineProperties( t, e ), Object.defineProperty( t, "prototype", {
    writable: !1
  } ), t;
}

var JustAccordion = function() {
  function t( s, e ) {
    _classCallCheck( this, t );
    this.options = Object.assign( {
      isOpen: function() {},
      isClose: function() {},
      speed: 300,
      showFirst: !1,
      showOnlyOne: !1,
      activeHandlerClass: null,
      activeContentClass: null,
      openItems: [] // новый параметр
    }, e ), this.selector = s, this.accordions = document.querySelector( s ), this.accordions ? ( this.accordionsHandlers = this.accordions.querySelectorAll( ".accordion__control" ), this.accordionsContents = this.accordions.querySelectorAll( ".accordion__content" ), this.check(), this.init(), this.events() ) : console.error( 'Selector "'.concat( this.selector, " not found" ) );
  }

  return _createClass( t, [ {
    key: "check",
    value: function() {
      document.querySelectorAll( this.selector ).length > 1 && console.error( 'Selector "'.concat( this.selector, '" already exists!' ) );
    }
  }, {
    key: "init",
    value: function() {
      var t = this;
      this.accordionsHandlers.forEach( function( s ) {
        s.setAttribute( "aria-expanded", !1 ), null !== t.options.activeHandlerClass && s.classList.remove( t.options.activeHandlerClass );
      } ), this.accordionsContents.forEach( function( s ) {
        s.setAttribute( "aria-hidden", !0 ), s.style.setProperty( "--accordion-time", "".concat( t.options.speed / 1e3, "s" ) ), null !== t.options.activeContentClass && s.classList.remove( t.options.activeContentClass );
      } );

      if ( this.options.showFirst ) {
        this.openAccordion( 0 );
      }

      if ( Array.isArray( this.options.openItems ) && this.options.openItems.length > 0 ) {
        this.options.openItems.forEach( function( index ) {
          t.openAccordion( index );
        } );
      }
    }
  }, {
    key: "events",
    value: function() {
      var t = this;
      this.accordionsHandlers.forEach( function( s ) {
        s.addEventListener( "click", function( s ) {
          s.currentTarget.classList.contains( "accordion__control--open" ) ? t.close( s.currentTarget ) : t.options.showOnlyOne ? t.toggle( s.currentTarget ) : t.open( s.currentTarget );
        } );
      } );
    }
  }, {
    key: "open",
    value: function( t ) {
      var s = Array.prototype.indexOf.call( this.accordionsHandlers, t );
      this.openAccordion( s );
    }
  }, {
    key: "close",
    value: function( t ) {
      var s = Array.prototype.indexOf.call( this.accordionsHandlers, t );
      this.closeAccordion( s );
    }
  }, {
    key: "toggle",
    value: function( t ) {
      var s = this,
        e = Array.prototype.indexOf.call( this.accordionsHandlers, t );
      this.accordionsHandlers.forEach( function( t ) {
        t.setAttribute( "aria-expanded", !1 ), t.classList.remove( "accordion__control--open" ), null !== s.options.activeHandlerClass && t.classList.remove( s.options.activeHandlerClass );
      } ), this.accordionsContents.forEach( function( t ) {
        t.setAttribute( "aria-hidden", !0 ), t.style.maxHeight = null, null !== s.options.activeContentClass && t.classList.remove( s.options.activeContentClass );
      } ), this.openAccordion( e );
    }
  }, {
    key: "openAccordion",
    value: function( index ) {
      if ( index < 0 || index >= this.accordionsHandlers.length ) return;
      var handler = this.accordionsHandlers[ index ];
      var content = this.accordionsContents[ index ];
      handler.classList.add( "accordion__control--open" );
      handler.setAttribute( "aria-expanded", !0 );
      content.style.maxHeight = content.scrollHeight + "px";
      content.setAttribute( "aria-hidden", !1 );
      null !== this.options.activeHandlerClass && handler.classList.add( this.options.activeHandlerClass );
      null !== this.options.activeContentClass && content.classList.add( this.options.activeContentClass );
      this.options.isOpen( this );
    }
  }, {
    key: "closeAccordion",
    value: function( index ) {
      if ( index < 0 || index >= this.accordionsHandlers.length ) return;
      var handler = this.accordionsHandlers[ index ];
      var content = this.accordionsContents[ index ];
      handler.classList.remove( "accordion__control--open" );
      handler.setAttribute( "aria-expanded", !1 );
      content.style.maxHeight = null;
      content.setAttribute( "aria-hidden", !0 );
      null !== this.options.activeHandlerClass && handler.classList.remove( this.options.activeHandlerClass );
      null !== this.options.activeContentClass && content.classList.remove( this.options.activeContentClass );
      this.options.isClose( this );
    }
  } ] ), t;
}();
